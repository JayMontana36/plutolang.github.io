"use strict";(self.webpackChunkpluto=self.webpackChunkpluto||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"What is Pluto?","href":"/docs/Introduction","docId":"Introduction"},{"type":"link","label":"Getting Started","href":"/docs/Getting Started","docId":"Getting Started"},{"type":"category","label":"New Syntax","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Continue Statement","href":"/docs/New Syntax/Continue Statement","docId":"New Syntax/Continue Statement"},{"type":"link","label":"Lambda Expressions","href":"/docs/New Syntax/Lambda Expressions","docId":"New Syntax/Lambda Expressions"},{"type":"link","label":"Switch Statement","href":"/docs/New Syntax/Switch Statement","docId":"New Syntax/Switch Statement"},{"type":"link","label":"Ternary Expressions","href":"/docs/New Syntax/Ternary Expressions","docId":"New Syntax/Ternary Expressions"},{"type":"link","label":"When Statement","href":"/docs/New Syntax/When Statement","docId":"New Syntax/When Statement"}],"href":"/docs/category/new-syntax"},{"type":"category","label":"New Features","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Break Statement","href":"/docs/New Features/Break Statement","docId":"New Features/Break Statement"},{"type":"link","label":"Compiler Warnings","href":"/docs/New Features/Compiler Warnings","docId":"New Features/Compiler Warnings"},{"type":"link","label":"Default Arguments","href":"/docs/New Features/Default Arguments","docId":"New Features/Default Arguments"},{"type":"link","label":"In Expressions","href":"/docs/New Features/In Expressions","docId":"New Features/In Expressions"},{"type":"link","label":"Numeral Parsing","href":"/docs/New Features/Numeral Parsing","docId":"New Features/Numeral Parsing"},{"type":"link","label":"Safe Navigation","href":"/docs/New Features/Safe Navigation","docId":"New Features/Safe Navigation"},{"type":"link","label":"String Indexing","href":"/docs/New Features/String Indexing","docId":"New Features/String Indexing"},{"type":"link","label":"Table Freezing","href":"/docs/New Features/Table Freezing","docId":"New Features/Table Freezing"},{"type":"link","label":"Type Hinting","href":"/docs/New Features/Type Hinting","docId":"New Features/Type Hinting"}],"href":"/docs/category/new-features"},{"type":"category","label":"New Operators","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Alternative Operators","href":"/docs/New Operators/Alternative Operators","docId":"New Operators/Alternative Operators"},{"type":"link","label":"Compound Operators","href":"/docs/New Operators/Compound Operators","docId":"New Operators/Compound Operators"},{"type":"link","label":"Null-Coalescing Operator","href":"/docs/New Operators/Null-Coalescing Operator","docId":"New Operators/Null-Coalescing Operator"},{"type":"link","label":"Walrus Operator","href":"/docs/New Operators/Walrus Operator","docId":"New Operators/Walrus Operator"}],"href":"/docs/category/new-operators"},{"type":"category","label":"Optimizations","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"For Loops","href":"/docs/Optimizations/For Loops","docId":"Optimizations/For Loops"},{"type":"link","label":"Jump Table","href":"/docs/Optimizations/Jump Table","docId":"Optimizations/Jump Table"},{"type":"link","label":"Long Jump","href":"/docs/Optimizations/Long Jump","docId":"Optimizations/Long Jump"},{"type":"link","label":"Special Arthimetic","href":"/docs/Optimizations/Special Arthimetic","docId":"Optimizations/Special Arthimetic"},{"type":"link","label":"Table Length","href":"/docs/Optimizations/Table Length","docId":"Optimizations/Table Length"}],"href":"/docs/category/optimizations"},{"type":"category","label":"Standard Library","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Base Functions","href":"/docs/Standard Library/Base Functions","docId":"Standard Library/Base Functions"},{"type":"link","label":"Crypto Functions","href":"/docs/Standard Library/Crypto Functions","docId":"Standard Library/Crypto Functions"},{"type":"link","label":"IO Functions","href":"/docs/Standard Library/IO Functions","docId":"Standard Library/IO Functions"},{"type":"link","label":"OS Functions","href":"/docs/Standard Library/OS Functions","docId":"Standard Library/OS Functions"},{"type":"link","label":"String Functions","href":"/docs/Standard Library/String Functions","docId":"Standard Library/String Functions"},{"type":"link","label":"Table Functions","href":"/docs/Standard Library/Table Functions","docId":"Standard Library/Table Functions"}],"href":"/docs/category/standard-library"},{"type":"category","label":"QoL Improvements","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Better Method Creation","href":"/docs/QoL Improvements/Better Method Creation","docId":"QoL Improvements/Better Method Creation"},{"type":"link","label":"Generalized Iteration","href":"/docs/QoL Improvements/Generalized Iteration","docId":"QoL Improvements/Generalized Iteration"},{"type":"link","label":"Optional Parentheses","href":"/docs/QoL Improvements/Optional Parentheses","docId":"QoL Improvements/Optional Parentheses"},{"type":"link","label":"Reserved Identifiers","href":"/docs/QoL Improvements/Reserved Identifiers","docId":"QoL Improvements/Reserved Identifiers"},{"type":"link","label":"Syntax Errors","href":"/docs/QoL Improvements/Syntax Errors","docId":"QoL Improvements/Syntax Errors"}],"href":"/docs/category/qol-improvements"},{"type":"category","label":"For Developers","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Compatibility","href":"/docs/For Developers/Compatibility","docId":"For Developers/Compatibility"},{"type":"link","label":"Infinite Loop Prevention","href":"/docs/For Developers/Infinite Loop Prevention","docId":"For Developers/Infinite Loop Prevention"},{"type":"link","label":"VM Dump","href":"/docs/For Developers/VM Dump","docId":"For Developers/VM Dump"}],"href":"/docs/category/for-developers"}]},"docs":{"For Developers/Compatibility":{"id":"For Developers/Compatibility","title":"Compatibility","description":"How compatible with Lua is Pluto?","sidebar":"tutorialSidebar"},"For Developers/Infinite Loop Prevention":{"id":"For Developers/Infinite Loop Prevention","title":"Infinite Loop Prevention","description":"Pluto can detect infinite loops by preventing too many successive iterations. This was implemented because game threads usually force users to call some sort of yield mechanism to return control to the game thread. In Pluto, you specify a hard bottleneck on iterations, then you specify a function pointer which should prevent ILP within the loop it\'s called in.","sidebar":"tutorialSidebar"},"For Developers/VM Dump":{"id":"For Developers/VM Dump","title":"VM Dump","description":"Pluto offers an optional, configurable feature to see every instruction that is executed in the Lua VM.","sidebar":"tutorialSidebar"},"Getting Started":{"id":"Getting Started","title":"Getting Started","description":"This document will explain how to get started with writing Pluto in no time.","sidebar":"tutorialSidebar"},"Introduction":{"id":"Introduction","title":"What is Pluto?","description":"Pluto is a fork of the Lua 5.4 programming language. Lua is designed to be a small, fast, and embeddable language. It\'s used very often in games and resource-restricted regions. Lua bites a bullet by needing to stay small though, it lacks general-purpose features. This strain on the language makes it difficult to produce complex scripts at an accelerated rate. It takes more time to implement alternatives for missing syntax, or writing your own manual functions to split strings.","sidebar":"tutorialSidebar"},"New Features/Break Statement":{"id":"New Features/Break Statement","title":"Break Statement","description":"This keyword accepts an optional integral argument which tells it how many levels of enclosing loops it should break. The default value is 1, thus breaking out of the current loop.","sidebar":"tutorialSidebar"},"New Features/Compiler Warnings":{"id":"New Features/Compiler Warnings","title":"Compiler Warnings","description":"Pluto offers optional compiler warnings for certain misbehaviors.","sidebar":"tutorialSidebar"},"New Features/Default Arguments":{"id":"New Features/Default Arguments","title":"Default Arguments","description":"During a function declaration, parameters can now declare their own default value, which must be a compile-time constant.","sidebar":"tutorialSidebar"},"New Features/In Expressions":{"id":"New Features/In Expressions","title":"In Expressions","description":"Searching a string for a substring, or searching an array for an element is a very simple operation now. The in operator has been extended to support these operations.","sidebar":"tutorialSidebar"},"New Features/Numeral Parsing":{"id":"New Features/Numeral Parsing","title":"Numeral Parsing","description":"A small change to the numeral parser allows arbitrary characters inside of numeric literals. This is applied for underscores, which will allow you to make longer numbers more readable.","sidebar":"tutorialSidebar"},"New Features/Safe Navigation":{"id":"New Features/Safe Navigation","title":"Safe Navigation","description":"Accessing deeply nested fields which can potentially be nil was problematic, because you\'d need an unreasonable amount of guard clauses to prevent an \\"attempt to index nil\\" error. Pluto now offers this syntax:","sidebar":"tutorialSidebar"},"New Features/String Indexing":{"id":"New Features/String Indexing","title":"String Indexing","description":"You can index strings for their characters now, which is cleaner & 3x faster than using string.sub. String indexing only occurs when you index with an integer, either positive or negative. Positive integers index from the start of the string, and negative integers index from the end.","sidebar":"tutorialSidebar"},"New Features/Table Freezing":{"id":"New Features/Table Freezing","title":"Table Freezing","description":"Tables can now be frozen at their current state to forbid any future modification. This action is irreversible and permanent for the lifespan of the table.","sidebar":"tutorialSidebar"},"New Features/Type Hinting":{"id":"New Features/Type Hinting","title":"Type Hinting","description":"Type-hinting looks like this:","sidebar":"tutorialSidebar"},"New Operators/Alternative Operators":{"id":"New Operators/Alternative Operators","title":"Alternative Operators","description":"Pluto implements alternative operators, which are aliases for other operators.","sidebar":"tutorialSidebar"},"New Operators/Compound Operators":{"id":"New Operators/Compound Operators","title":"Compound Operators","description":"Pluto implements a plethora of compound operators, which are actually faster than their Lua counterparts.","sidebar":"tutorialSidebar"},"New Operators/Null-Coalescing Operator":{"id":"New Operators/Null-Coalescing Operator","title":"Null-Coalescing Operator","description":"The null-coalescing operator (or more appropriately, nil-coalescing operator) is used as follows:","sidebar":"tutorialSidebar"},"New Operators/Walrus Operator":{"id":"New Operators/Walrus Operator","title":"Walrus Operator","description":"The Walrus operator allows you to perform assignment expresssions, where the second operand to your assignment is the value of the expression.","sidebar":"tutorialSidebar"},"New Syntax/Continue Statement":{"id":"New Syntax/Continue Statement","title":"Continue Statement","description":"Continue statements are meant to be used in loops, like break. They skip the current iteration of the loop, and they\'ll skip any code necessary to do so.","sidebar":"tutorialSidebar"},"New Syntax/Lambda Expressions":{"id":"New Syntax/Lambda Expressions","title":"Lambda Expressions","description":"Lambda expressions are shorthand function objects for evaluating quick expressions. Take this code:","sidebar":"tutorialSidebar"},"New Syntax/Switch Statement":{"id":"New Syntax/Switch Statement","title":"Switch Statement","description":"The switch statement consists of the following new keywords:","sidebar":"tutorialSidebar"},"New Syntax/Ternary Expressions":{"id":"New Syntax/Ternary Expressions","title":"Ternary Expressions","description":"Ternary expressions behave identical as to how they would in C. They introduce no new keywords.","sidebar":"tutorialSidebar"},"New Syntax/When Statement":{"id":"New Syntax/When Statement","title":"When Statement","description":"The when statement is vehemently similar to the until statement. It\'s simply the direct opposite.","sidebar":"tutorialSidebar"},"Optimizations/For Loops":{"id":"Optimizations/For Loops","title":"For Loops","description":"The pairs and ipairs functions are optimized by Pluto in several complex ways. On a consistent basis, pairs & ipairs loops are 3.5x faster than their Lua counterparts.","sidebar":"tutorialSidebar"},"Optimizations/Jump Table":{"id":"Optimizations/Jump Table","title":"Jump Table","description":"Lua implemented a jump table, but it is not portable. Pluto has an additional jump table implementation for other compilers; however, it is not enabled by default as it can add minutes to compile time, depending on the setup. In some instances, it can increase overall virtual machine performance by ~5%.","sidebar":"tutorialSidebar"},"Optimizations/Long Jump":{"id":"Optimizations/Long Jump","title":"Long Jump","description":"Although Lua presents the option to use long jumps even when compiling as C++, it doesn\'t default to doing so, instead requiring you to define LUAUSELONGJMP.","sidebar":"tutorialSidebar"},"Optimizations/Special Arthimetic":{"id":"Optimizations/Special Arthimetic","title":"Special Arthimetic","description":"Special arithmetic algorithms are optimized by Pluto during compile-time.","sidebar":"tutorialSidebar"},"Optimizations/Table Length":{"id":"Optimizations/Table Length","title":"Table Length","description":"Pluto will cache the length of a table when you request it for the first time. This cache is refreshed whenever you make an edit to the table. It\'s still advisable to localize this value though, since looking through the cache and the virtual machine is expensive compared to looking up a local.","sidebar":"tutorialSidebar"},"QoL Improvements/Better Method Creation":{"id":"QoL Improvements/Better Method Creation","title":"Better Method Creation","description":"A series of methods was otherwise ugly to implement into a Lua table.","sidebar":"tutorialSidebar"},"QoL Improvements/Generalized Iteration":{"id":"QoL Improvements/Generalized Iteration","title":"Generalized Iteration","description":"It\'s redundant to call the pairs function for simple iteration. This action is now optional, and handled by the virtual machine if the function is absent.","sidebar":"tutorialSidebar"},"QoL Improvements/Optional Parentheses":{"id":"QoL Improvements/Optional Parentheses","title":"Optional Parentheses","description":"The parenthesis around some types of expressions are optional now.","sidebar":"tutorialSidebar"},"QoL Improvements/Reserved Identifiers":{"id":"QoL Improvements/Reserved Identifiers","title":"Reserved Identifiers","description":"Pluto allows you to use reserved tokens such as if from Lua and default from Pluto as identifiers with shorthand table syntax and for goto labels.","sidebar":"tutorialSidebar"},"QoL Improvements/Syntax Errors":{"id":"QoL Improvements/Syntax Errors","title":"Syntax Errors","description":"The messages for syntax errors are enhanced. They include tailored messages and code snippets, which should help newer programmers identify problems quicker. It\'s not a game changer, but it\'s neat.","sidebar":"tutorialSidebar"},"Standard Library/Base Functions":{"id":"Standard Library/Base Functions","title":"Base Functions","description":"New functions for the base library, implemented by Pluto.","sidebar":"tutorialSidebar"},"Standard Library/Crypto Functions":{"id":"Standard Library/Crypto Functions","title":"Crypto Functions","description":"Functions regarding cryptography, implemented by Pluto.","sidebar":"tutorialSidebar"},"Standard Library/IO Functions":{"id":"Standard Library/IO Functions","title":"IO Functions","description":"New functions for the io library, implemented by Pluto.","sidebar":"tutorialSidebar"},"Standard Library/OS Functions":{"id":"Standard Library/OS Functions","title":"OS Functions","description":"New functions for the os library, implemented by Pluto.","sidebar":"tutorialSidebar"},"Standard Library/String Functions":{"id":"Standard Library/String Functions","title":"String Functions","description":"New functions for the string type, implemented by Pluto.","sidebar":"tutorialSidebar"},"Standard Library/Table Functions":{"id":"Standard Library/Table Functions","title":"Table Functions","description":"New functions for the table type, implemented by Pluto.","sidebar":"tutorialSidebar"}}}')}}]);