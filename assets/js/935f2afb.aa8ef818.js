"use strict";(self.webpackChunkpluto=self.webpackChunkpluto||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"What is Pluto?","href":"/docs/Introduction","docId":"Introduction"},{"type":"link","label":"Getting Started","href":"/docs/Getting Started","docId":"Getting Started"},{"type":"category","label":"New Syntax","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Continue Statement","href":"/docs/New Syntax/Continue Statement","docId":"New Syntax/Continue Statement"},{"type":"link","label":"Lambda Expressions","href":"/docs/New Syntax/Lambda Expressions","docId":"New Syntax/Lambda Expressions"},{"type":"link","label":"Switch Statement","href":"/docs/New Syntax/Switch Statement","docId":"New Syntax/Switch Statement"},{"type":"link","label":"Ternary Expressions","href":"/docs/New Syntax/Ternary Expressions","docId":"New Syntax/Ternary Expressions"},{"type":"link","label":"When Expression","href":"/docs/New Syntax/When Expression","docId":"New Syntax/When Expression"}],"href":"/docs/category/new-syntax"},{"type":"category","label":"New Features","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Compiler Warnings","href":"/docs/New Features/Compiler Warnings","docId":"New Features/Compiler Warnings"},{"type":"link","label":"Infinite Loop Prevention","href":"/docs/New Features/Infinite Loop Prevention","docId":"New Features/Infinite Loop Prevention"},{"type":"link","label":"Numeral Parsing","href":"/docs/New Features/Numeral Parsing","docId":"New Features/Numeral Parsing"},{"type":"link","label":"String Indexing","href":"/docs/New Features/String Indexing","docId":"New Features/String Indexing"},{"type":"link","label":"Table Freezing","href":"/docs/New Features/Table Freezing","docId":"New Features/Table Freezing"}],"href":"/docs/category/new-features"},{"type":"category","label":"New Operators","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Alternative Operators","href":"/docs/New Operators/Alternative Operators","docId":"New Operators/Alternative Operators"},{"type":"link","label":"Compound Operators","href":"/docs/New Operators/Compound Operators","docId":"New Operators/Compound Operators"}],"href":"/docs/category/new-operators"},{"type":"category","label":"Optimizations","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"For Loops","href":"/docs/Optimizations/For Loops","docId":"Optimizations/For Loops"},{"type":"link","label":"Jump Table","href":"/docs/Optimizations/Jump Table","docId":"Optimizations/Jump Table"},{"type":"link","label":"Table Length","href":"/docs/Optimizations/Table Length","docId":"Optimizations/Table Length"}],"href":"/docs/category/optimizations"},{"type":"category","label":"Standard Library","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Base Functions","href":"/docs/Standard Library/Base Functions","docId":"Standard Library/Base Functions"},{"type":"link","label":"IO Functions","href":"/docs/Standard Library/IO Functions","docId":"Standard Library/IO Functions"},{"type":"link","label":"OS Functions","href":"/docs/Standard Library/OS Functions","docId":"Standard Library/OS Functions"},{"type":"link","label":"String Functions","href":"/docs/Standard Library/String Functions","docId":"Standard Library/String Functions"},{"type":"link","label":"Table Functions","href":"/docs/Standard Library/Table Functions","docId":"Standard Library/Table Functions"}],"href":"/docs/category/standard-library"},{"type":"category","label":"QoL Improvements","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Optional Parentheses","href":"/docs/QoL Improvements/Optional Parentheses","docId":"QoL Improvements/Optional Parentheses"},{"type":"link","label":"Syntax Errors","href":"/docs/QoL Improvements/Syntax Errors","docId":"QoL Improvements/Syntax Errors"}],"href":"/docs/category/qol-improvements"},{"type":"category","label":"Backwards Compatibility","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Compatibility Mode","href":"/docs/Backwards Compatibility/Compatibility Mode","docId":"Backwards Compatibility/Compatibility Mode"},{"type":"link","label":"Incompatibilities","href":"/docs/Backwards Compatibility/Incompatibilities","docId":"Backwards Compatibility/Incompatibilities"}],"href":"/docs/category/backwards-compatibility"}]},"docs":{"Backwards Compatibility/Compatibility Mode":{"id":"Backwards Compatibility/Compatibility Mode","title":"Compatibility Mode","description":"Compatibility Mode in Pluto will prefix all of the new keywords with pluto_ to prevent conflicts with any existing identifiers.","sidebar":"tutorialSidebar"},"Backwards Compatibility/Incompatibilities":{"id":"Backwards Compatibility/Incompatibilities","title":"Incompatibilities","description":"How compatible with Lua is Pluto?","sidebar":"tutorialSidebar"},"Getting Started":{"id":"Getting Started","title":"Getting Started","description":"This document will explain how to get started with writing Pluto in no time.","sidebar":"tutorialSidebar"},"Introduction":{"id":"Introduction","title":"What is Pluto?","description":"Pluto is a fork of the Lua 5.4 programming language. Lua is designed to be a small, fast, and embeddable language. It\'s used very often in games and resource-restricted regions. Lua bites a bullet by needing to stay small though, it lacks general-purpose features. This strain on the language makes it difficult to produce complex scripts at an accelerated rate. It takes more time to implement alternatives for missing syntax, or writing your own manual functions to split strings.","sidebar":"tutorialSidebar"},"New Features/Compiler Warnings":{"id":"New Features/Compiler Warnings","title":"Compiler Warnings","description":"Pluto offers optional compiler warnings for certain misbehaviors. Currently, this is applied only to duplicated local definitions. These internal checks are faster, and more reliable than analytical third-party software.","sidebar":"tutorialSidebar"},"New Features/Infinite Loop Prevention":{"id":"New Features/Infinite Loop Prevention","title":"Infinite Loop Prevention","description":"Pluto can detect infinite loops by preventing too many successive iterations. This was implemented because game threads usually force users to call some sort of yield mechanism to return control to the game thread. In Pluto, you specify a hard bottleneck on iterations, then you specify a function pointer which should prevent ILP within the loop it\'s called in.","sidebar":"tutorialSidebar"},"New Features/Numeral Parsing":{"id":"New Features/Numeral Parsing","title":"Numeral Parsing","description":"A small change to the numeral parser allows arbitrary characters inside of numeric literals. This is applied for underscores, which will allow you to make longer numbers more readable.","sidebar":"tutorialSidebar"},"New Features/String Indexing":{"id":"New Features/String Indexing","title":"String Indexing","description":"You can index strings for their characters now, which is cleaner & 3x faster than using string.sub. String indexing only occurs when you index with an integer, either positive or negative. Positive integers index from the start of the string, and negative integers index from the end.","sidebar":"tutorialSidebar"},"New Features/Table Freezing":{"id":"New Features/Table Freezing","title":"Table Freezing","description":"Tables can now be frozen at their current state to forbid any future modification. This action is irreversible and permanent for the lifespan of the table.","sidebar":"tutorialSidebar"},"New Operators/Alternative Operators":{"id":"New Operators/Alternative Operators","title":"Alternative Operators","description":"Pluto implements alternative operators, which are aliases for other operators.","sidebar":"tutorialSidebar"},"New Operators/Compound Operators":{"id":"New Operators/Compound Operators","title":"Compound Operators","description":"Pluto implements a plethora of compound operators, which are actually faster than their Lua counterparts.","sidebar":"tutorialSidebar"},"New Syntax/Continue Statement":{"id":"New Syntax/Continue Statement","title":"Continue Statement","description":"Continue statements are meant to be used in loops, like break. They skip the current iteration of the loop, and they\'ll skip any code necessary to do so.","sidebar":"tutorialSidebar"},"New Syntax/Lambda Expressions":{"id":"New Syntax/Lambda Expressions","title":"Lambda Expressions","description":"Lambda expressions are shorthand function objects for evaluating quick expressions. Take this code:","sidebar":"tutorialSidebar"},"New Syntax/Switch Statement":{"id":"New Syntax/Switch Statement","title":"Switch Statement","description":"The switch statement consists of the following new keywords:","sidebar":"tutorialSidebar"},"New Syntax/Ternary Expressions":{"id":"New Syntax/Ternary Expressions","title":"Ternary Expressions","description":"Ternary expressions behave identical as to how they would in C. They introduce no new keywords.","sidebar":"tutorialSidebar"},"New Syntax/When Expression":{"id":"New Syntax/When Expression","title":"When Expression","description":"The when expression is vehemently similar to the until expression. It\'s simply the direct opposite.","sidebar":"tutorialSidebar"},"Optimizations/For Loops":{"id":"Optimizations/For Loops","title":"For Loops","description":"The pairs and ipairs functions are optimized by Pluto in several complex ways. On a consistent basis, pairs & ipairs loops are 3.5x faster than their Lua counterparts.","sidebar":"tutorialSidebar"},"Optimizations/Jump Table":{"id":"Optimizations/Jump Table","title":"Jump Table","description":"Lua implemented a jump table, but it is not portable. Pluto has an additional jump table implementation for other compilers; however, it is not enabled by default as it can add minutes to compile time, depending on the setup. In some instances, it can increase overall virtual machine performance by ~5%.","sidebar":"tutorialSidebar"},"Optimizations/Table Length":{"id":"Optimizations/Table Length","title":"Table Length","description":"Pluto will cache the length of a table when you request it for the first time. This cache is refreshed whenever you make an edit to the table. It\'s still advisable to localize this value though, since looking through the cache and the virtual machine is expensive compared to looking up a local.","sidebar":"tutorialSidebar"},"QoL Improvements/Optional Parentheses":{"id":"QoL Improvements/Optional Parentheses","title":"Optional Parentheses","description":"The parenthesis around some types of expressions are optional now.","sidebar":"tutorialSidebar"},"QoL Improvements/Syntax Errors":{"id":"QoL Improvements/Syntax Errors","title":"Syntax Errors","description":"The messages for syntax errors are enhanced. They include tailored messages and code snippets, which should help newer programmers identify problems quicker. It\'s not a game changer, but it\'s neat.","sidebar":"tutorialSidebar"},"Standard Library/Base Functions":{"id":"Standard Library/Base Functions","title":"Base Functions","description":"New functions for the base library, implemented by Pluto.","sidebar":"tutorialSidebar"},"Standard Library/IO Functions":{"id":"Standard Library/IO Functions","title":"IO Functions","description":"New functions for the io library, implemented by Pluto.","sidebar":"tutorialSidebar"},"Standard Library/OS Functions":{"id":"Standard Library/OS Functions","title":"OS Functions","description":"New functions for the os library, implemented by Pluto.","sidebar":"tutorialSidebar"},"Standard Library/String Functions":{"id":"Standard Library/String Functions","title":"String Functions","description":"New functions for the string type, implemented by Pluto.","sidebar":"tutorialSidebar"},"Standard Library/Table Functions":{"id":"Standard Library/Table Functions","title":"Table Functions","description":"New functions for the table type, implemented by Pluto.","sidebar":"tutorialSidebar"}}}')}}]);