"use strict";(self.webpackChunkpluto=self.webpackChunkpluto||[]).push([[507],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),f=c(n),d=o,m=f["".concat(s,".").concat(d)]||f[d]||u[d]||i;return n?r.createElement(m,a(a({ref:t},p),{},{components:n})):r.createElement(m,a({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},8846:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const i={},a=void 0,l={unversionedId:"New Features/Infinite Loop Prevention",id:"New Features/Infinite Loop Prevention",title:"Infinite Loop Prevention",description:"Pluto can detect infinite loops by preventing too many successive iterations. In game threads, a long-running loop is usually problematic, this could crash the game. Game developers often work around this by making their scripters call a yield function. In Pluto, you specify a hard bottleneck on iterations, then you specify a function pointer which should prevent ILP within the loop it's called in.",source:"@site/docs/New Features/Infinite Loop Prevention.md",sourceDirName:"New Features",slug:"/New Features/Infinite Loop Prevention",permalink:"/docs/New Features/Infinite Loop Prevention",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Compiler Warnings",permalink:"/docs/New Features/Compiler Warnings"},next:{title:"Table Freezing",permalink:"/docs/New Features/Table Freezing"}},s={},c=[{value:"Note",id:"note",level:4}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Pluto can detect infinite loops by preventing too many successive iterations. In game threads, a long-running loop is usually problematic, this could crash the game. Game developers often work around this by making their scripters call a ",(0,o.kt)("inlineCode",{parentName:"p"},"yield")," function. In Pluto, you specify a hard bottleneck on iterations, then you specify a function pointer which should prevent ILP within the loop it's called in."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="This will produce an error due to ILP:"',title:'"This',will:!0,produce:!0,an:!0,error:!0,due:!0,to:!0,'ILP:"':!0},"while true do\n\nend\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="This will not, with correct configuration:"',title:'"This',will:!0,"not,":!0,with:!0,correct:!0,'configuration:"':!0},"while true do\n    yield()\nend\n")),(0,o.kt)("p",null,"Configuration of the ILP mechanism is fairly loaded, and it's only for developers. As such, I believe Pluto's ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/well-in-that-case/Pluto/blob/3547522b5ed93f35ef371a2930e733ca815589bf/src/luaconf.h#L874"},"configuration file")," explains the rest appropriately."),(0,o.kt)("h4",{id:"note"},"Note"),(0,o.kt)("p",null,"This is a very simple mechanic. It has no performance overhead & it's lightweight. However, the compromise for this was coverage. This will reliably prevent most user error, however malicious users can find a way to block a thread still. For example, any forward jump will prevent the mechanism from breaking a loop. This can be exploited, so don't rely on this for security."))}u.isMDXComponent=!0}}]);